#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require_relative '../lib/dome'

opts = Optimist.options do
  version Dome::VERSION
  banner <<-BANNER
  Dome wraps the Terraform API and performs useful stuff.

  Usage:
        dome [--sudo] --<command>
  where <command>s are:
  BANNER

  opt :plan, 'Creates a Terraform plan'
  opt :apply, 'Applies a Terraform plan'
  opt :init, 'Run Terraform init'
  opt :state, 'Synchronises the Terraform state'
  opt :output, 'Print all Terraform output variables'
  opt :statecmd, 'Wrapper arround terraform state', type: :strings
  opt :refresh, 'Refresh the state'
  opt :console, 'Spawn terraform console'
  opt :sudo, 'Assume itv-root instead of the role specified in profile'
  opt :environment, 'Spawn sub-shell with the exported variables'
end

Optimist.educate unless opts.value?(true)

# FIXME: Relative path
@dome = Dome::Terraform.new(Dir.pwd, opts[:sudo])

if opts[:environment]
  Logger.info '--- Spawning shell ---'
  @dome.spawn_environment_shell
  Logger.info '--- Exiting shell ---'
  exit 0
end

@dome.validate_environment

begin
  if opts[:plan]
    @dome.plan
  elsif opts[:apply]
    @dome.apply
  elsif opts[:init]
    @dome.init
  elsif opts[:refresh]
    @dome.refresh
  elsif opts[:console]
    @dome.console
  elsif opts[:statecmd]
    @dome.statecmd(opts[:statecmd].join(' '))
  elsif opts[:state]
    @dome.s3_state
  elsif opts[:output]
    @dome.output
  end
rescue Interrupt
  Logger.error "\ndome execution interrupted!".colorize(:red)
end
